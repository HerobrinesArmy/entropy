; --------------------------------------------
; Title:   				A File Driver to work with Entropy's FAT 16 based File System
; Author:  				Liraal
; Editor:				LukeW4lker
; Date of creation:    	2012-10-31
; --------------------------------------------

;=============================================
;VARIABLES
;=============================================
:fd_drive_cur 	dat 0x0
:fd_dir	  		dat 0x0
:fd_FAT_offset	dat 0xC8
:fd_FAT_number	dat 0x3
:fd_root_offset	dat 0xCB
:fd_FAT			dat 0x0
:fd_dir_entry		dat 0x0, 0x0, 0x0, 0x0 
					dat	0x0, 0x0, 0x0, 0x0
					dat 0x0, 0x0, 0x0, 0x0
					dat 0x0, 0x0, 0x0, 0x0
:fd_dir_entry_end
:fd_drive_table	dat 0x0
:fd_drive_cap		dat 0x8
:fd_boot_drive	dat 0x0

:fd_drive_number	dat 0x4		;Max 4 drives are supported
;=============================================
;ROUTINES
;=============================================

;---------------------------------------------
;errors
;---------------------------------------------

:fd_oom 	dat 0x0, 0x2345	;out of memory
:fd_nes	dat 0x0, 0x3456


;---------------------------------------------
;I/O
;---------------------------------------------

:fd_change_drive	;A - drive number from 0 to [fd_drive_cap]
set A, push
mul A, 0x2
add A, [fd_drive_table]
set [fd_drive_cur], [A]
add A, 0x1
set [fd_FAT], [A]
set A, pop
set pc, pop

:fd_write_sector		;A - sector number, C - location in memory
set push, Z
set Z, 3
set pc, fd_load_sector_start

:fd_load_sector		;A - sector number, C - location in memory
set push, Z
set Z, 2
:fd_load_sector_start
set push, A
set push, X
set push, Y
set X, A
set Y, C
set A, Z
hwi [fd_drive_cur]
:fd_load_sector_loop_b
set A, 0
hwi [fd_drive_cur]
ife B, 3
set pc, fd_load_sector_loop_b
set Y, pop
set X, pop
set A, pop
set Z, pop
set pc, pop

;---------------------------------------------
;FAT ACCESS 
;---------------------------------------------

:fd_load_FAT
ifn [fd_FAT], 0x0
	set pc, pop
set push, A
set push, B
set push, C
set A, [fd_FAT_number]
set B, A
shl A, 9
jsr mm_request_memory
set C, A
set [fd_FAT], C
set A, [fd_FAT_offset]
add B, A
:.loop
jsr fd_load_sector
add C, 0x200
add A, 0x1
ifl A, B
	set pc, .loop
set C, pop
set B, pop
set A, pop
set pc, pop

:fd_update_FAT
ife [fd_FAT], 0x0
	set pc, pop
set push, A
set push, C
set A, [fd_FAT_offset]
set C, [fd_FAT]
:.loop
jsr fd_write_sector
add C, 0x200
add A, 0x1
ifl A, [fd_root_offset]
	set pc, .loop
set C, pop
set A, pop
set pc, pop

:fd_get_FAT_entry
set push, B
set B, [fd_FAT]
add B, A
set A, [B]
set B, pop
set pc, pop

:fd_free_FAT
ife [fd_FAT], 0x0
	set pc, pop
set push, A
set A, [fd_FAT]
jsr mm_free_memory
set [fd_FAT], 0x0
set A, pop
set pc, pop

:fd_get_free_sector	;A - a free sector or 0xFFFF if none
set push, X
set push, Y
set push, Z
set Y, 0x59F
sub Y, [fd_root_offset]
ife [fd_FAT], 0x0
	dat 0x0 ;error handler here
set Z, [fd_FAT]
add Z, 0x1FF
set A, [Z]
add A, [fd_FAT]
 :fd_get_free_sector_loop
 ife [A], 0x0
	set pc, fd_get_free_sector_end
 add A, 0x1
 ifg A, Y
	jsr fd_get_free_sector_bound
 ifn X, 0x2
	set pc, fd_get_free_sector_loop
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set A, 0xFFFF
 set pc, pop
 :fd_get_free_sector_end
 sub A, [fd_FAT]
 set [Z], A
 set Z, pop
 set Y, pop
 set X, pop
 set pc, pop
 
:fd_get_free_sector_bound
set A, [fd_FAT]
add X, 0x1 
set pc, pop

;---------------------------------------------
;FILE ACCESS
;---------------------------------------------

:fd_create_file	;A - file length
ife A, 0x0
	set pc, pop
set push, B
set push, C
set push, I
set push, J
set B, 0x0
set C, 0x0
set I, 0x0
set J, A
	:fd_create_file_loop
	jsr fd_get_free_sector
	ife C, 0x0
		set C, A
	ife A, 0xFFFF
		jsr fd_nes
	add A, [fd_FAT]
	set [A], B
	sub A, [fd_FAT]
	set B, A
	add I, 0x1
	ifn I, J
		set pc, fd_create_file_loop
add A, [fd_FAT]
set [A], 0xFFFF
set A, C
jsr fd_update_FAT
set J, pop
set I, pop
set C, pop
set B, pop
set pc, pop	
	
:fd_delete_file	;A - starting cluster

:fd_get_file_length	;args: A - starting cluster, output A - length
set push, I
set I, 0x0
:.loop
add I, 0x1
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
	set pc, .loop
set A, I
set I, pop
set pc, pop







:fd_load_file_pop_return_error	;in case of not enough memory to load a file
set A, pop
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set A, 0x0
set pc, pop



:fd_load_prog ; Load program A into memory. Will allocate 16 extra words of space.
;The same as fd_load_file for now.

:fd_load_file	;args: A - starting cluster of the file to load. output: A - address of loaded file
set push, B
set push, C
set push, I
set push, X
set push, Y
set push, A
jsr fd_get_file_length
mul A, 0x200
jsr mm_request_memory
ife a, 0x0	;error detection
    set pc, fd_load_file_pop_return_error
set X, A
set Y, A
set A, pop
set I, 0x0


:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_load_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop

set A, Y
set Y, pop
set X, pop
set I, pop
set C, pop
set B, pop
set pc, pop

:fd_edit_file	;args: A - starting cluster of the file to edit; B - address in memory to write from
set push, A
set push, B
set push, C
set push, I
set push, X
set push, A
set A, pop
set I, 0x0

:.loop
add I, 0x1
set B, 0x1
set C, X
add A, [fd_root_offset]
jsr fd_write_sector
add X, 0x200
sub A, [fd_root_offset]
set B, A
jsr fd_get_FAT_entry
ifn A, 0xFFFF
	ifl I, 0x5A0
		set pc, .loop
		
set X, pop
set I, pop
set C, pop
set B, pop
set A, pop
set pc, pop

:fd_open_file ; Open file A for reading and writing.
:fd_close_file ; Close file A.
:fd_find_sector ; Find sector B in file A.
:fd_apply ; Apply changes to file A. Do this before loading another sector in the file.
:fd_discard ; Discard changes to file A. Will reload the current sector from disk.
:fd_create ; Create file, dir or link A with flags B.
:fd_delete ; Delete file, dir or link A.
:fd_move ; Move file, dir or link A.
:fd_change_dir ; Change the working directory to A, one level at a time.
:fd_list ; List the files in the working directory.
:fd_get_wd ; Get the working directory.
:fd_get_flags ; Get the flags for file A.
:fd_set_flags ; Set the flags for file A to B. Some flag changes will be reverted before applying.
:fd_get_props ; Get the properties (size, number of children, flags, create, edit and view times).
:fd_format ; Format disk A with the filesystem.