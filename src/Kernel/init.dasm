;INITIATE KERNEL by Lucus

;This initiator is the first process

;For the memory manager, section info:
.dat init_stack - 2, 0 ;last section

:init
set sp, init_stack_end

:fd_init
set [fd_current_drive], [0xffff]

:im_init
hwn a
shl a, 1
jsr mm_request
ife a, -1
jsr fatal_error ;Does not return
set [im_table_address], a
ias im_interrupt_handler

:pm_init
;nothing to do here

:api_init
set a, api_table_length
set i, api_table
set j, 0
jsr ut_copy_mem

:cd_init			;initiate the clock, clock interrupts start after this
hwn i
sub i, 1
:.loop_a
ife i, -1
set pc, .no_clock
hwq i
ife a, 0xb402
ife b, 0x12d0
set pc, .found_clock
std pc, .loop_a
:.no_clock
set [cd_clock_id], -1
jsr fatal_error
:.found_clock
set [cd_clock_id], i
set a, i
set b, cd_interrupt_handler
jsr im_request
set b, i
add b, im_hardware_flag
set a, 2
hwi i
set a, 0
set b, 1
hwi i

:dm_init
set z, 0
hwn i
sub i, 1
:.loop_a
hwq i
ife a, hwq_m35fd_a
ife b, hwq_m35fd_b
ife c, hwq_m35fd_c
ife x, hwq_m35fd_x
ife y, hwq_m35fd_y
add z, 1
ifn i, 0
std pc, .loop_a
set [dm_drive_num], a
shl z, 2
set a, z
jsr mm_request
ife a, -1
jsr fatal_error ;does not return
set push, a
set i, a
set a, z
set b, 0
jsr ut_fill_mem
set z, pop
set [dm_drive_data], z
hwn i
sub i, 1
:.loop_b
hwq i
ife a, hwq_m35fd_a
ife b, hwq_m35fd_b
ife c, hwq_m35fd_c
ife x, hwq_m35fd_x
ife y, hwq_m35fd_y
jsr .add_m35fd
ifn i, 0
std pc, .loop_a
set pc, .continue
:.add_m35fd
set a, i
set b, dm_handler
jsr im_request
ifn a, 0 ;Couldn't get interrupt handler
set pc, pop ;Skip this drive
set a, 1
set x, i
add x, 0x1000
hwi i
set [z], i
add z, 1
set pc, pop
:.continue

;Load processes
set x, 8
jsr pm_add ;Load dummy.bin, located in sector 7.
set [pm_semaphore], 0 ;Let the scheduling begin
jsr pm_kill_me

sub pc, 3 ;if this proc didn't get killed, try again.

:fatal_error
;TODO Add stack output on LEM
set a, sp
set b, [sp]
set c, [sp + 1]
set x, 0xffff
set y, x
set z, y
set i, 0
set j, 0
add j, 1
add i, ex
sub pc, 3

;DATA
:api_table
.include "api.dasm"

:init_end

;For the memory manager, section info:
.dat 0xffff, -init_stack_end ;last section

:init_stack

.reserve 64

:init_stack_end

